작성할 파일
JackCompiler : 다른 모듈들을 설정하고 불러오는 최상위 모듈
	xxx.jack 단일파일 및 디렉터리를 입력받아 xxx.vm 파일 및 다수의 .vm 파일로 변환
	
JackTokenizer : 토큰화 모듈 - 10장 참조

SymbolTable : 기호 테이블
	범위 기호마다 index 부여
	- Static : 클래스
	- Field : 클래스
	- Argument : 서브루틴(메서드/함수/생성자)
	- Var : 서브루틴(메서드/함수/생성자)
	
	기호테이블에서 값을 찾을 수 없는경우 서브루틴 이름이나 클래스명으로 간주
	식별자 속성(타입, 종류, 인덱스)

	API :
		Constuctor
		startSubroutine
		Define
		VarCount
		KindOf
		TypeOf
		IndexOf
		
	두개의 해시 테이블로 구현!	

VMWriter : VM 코드 생성을 위한 출력 모듈
	API : 
		Constructor
		writePush
		writePop
		WriteArithmetic
		WriteLabel
		WriteGoto
		WriteIf
		writeCall
		writeFunction
		writeReturn
		close
		
CompilationEngine : 재귀적 하향식 컴파일 엔진
	자기 자신을 컴파일
	JackTokenizer에서 입력을 받아 출력을 VMWriter 로 보냄
	compileXxx() 루틴들로 구성
		구문 구조 xxx 를 읽어서 advance() 로 토큰화 모듈 적용 시점을 xxx 바로 다음으로 진행
		xxx 에 맞는 코드를 출력한다.
		! 값을 가지는 표현식의 일부라면 출력코드는 계산해서 VM 스택 상단에 입력
	
	API : 
		10장과 동일
		

알아둘것!
	잭언어의 타입의 길이는 모두 16비트
	잭언어는 상속을 지원하지 않음
	public class field 없음
		대신 접근자 메서드를 둬서 radius값을 .getRadius()으로 불러옴 (좋음 ㅎㅎ)
	최적화 신경 안씀
	
출력
	7,8장에서 만든 가상머신에서 실행되는 VM 코드가 만들어져야 함
	