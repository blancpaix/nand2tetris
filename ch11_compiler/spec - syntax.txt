컴파일러 구문분석

잭언어 컴파일러 만들거
1. 원본 프로그램의 구문 이해
2. 구문을 통해 프로그램의 의미 찾기

parsing (코드 분석)을 해서 특정 명령을 발견했다!
대상 언어의 문법을 이용해 프로그램 논리 재구성
	이 과정을 구문분석 (syntax analysis)
	
!구문분석기! 만들예정
프로그램 구조를 반영하는 XML 파일 출력.

다룰 것
 어휘 분석
 문맥 자유문법
 파스 트리
 재귀 하향 알고리듬
 
트리 및 해시 테이블 등의 고전 데이터 구조 사용
재귀적 컴파일 어떻게할거임?? - 전체 과정을 두개로 분해해서 구현하면 쉽다...???

컴파일러를 만들어보며 내부 처리방식을 이해하면 훨씬 더 수준높은 프로그래머가 도니다!
다양한 분야의데이터 문법을 정의할때도 동일하게 활용가능
=================================================================
컴파일러 구성 : 구문 분석, 코드 생성

구문분석 작업 모듈
	1. 토큰화 모듈
		입력 문자들을 언어 기본 요소로 분류
	2. 파싱 모듈
		토큰화 결과로 나온 언어 기본 요소 스트림을 언어의 구문 규칙에 맞추는 모듈...??
	!! 번역할 대상 언어와 완전히 독립적임
이렇게 해서 나온 결과물은 XML 파일로 출력할거임
	이렇게 2단계로 나눈 이유는 확인하기 쉽게 하기 위해서임
	
! 중첩 패턴 식별하고 분류

1.1 어휘 분석
	문자들을 토큰들로 분류함 (어휘 분석, 스캐닝, 토큰화 로 불림)
		while : 키워드, count : 식별자, <= : 연산자
	
1.2 문법
	파싱해서 형식 구조로 만드는게 어렵답니다...
	변수 선언, 명령문, 표현식 의 구조 중 어디에 해당하는지 알아야 함
	단말요소 ''로 표시	{ } ( ) ; ...
	비단말은 일반글꼴로 표시할거임
		하나 이상의 비단말 요소는 | 를 활용해 나열

1.3 구문 분석
	문법에 따라 입력 텍스트가 유효한지 확인
	텍스트와 문법의 대응관계, 문법 규칙이 계층적이기에 분석기(parse)의 출력은 Parse tree, derivation tree같은 트리기반 데이터 구조로 기술됨
	
	분석 과정에서 전체 굼누 구조를 알게 된다!
	
	재귀적 하향 구문 분석 Recursive descent parsing
		비단말이 단말 원소들만 이뤄짐? 단순히 처리
			그렇지 않으면 재귀적으로 비단말을 분석하는 루틴을 호출
			
		parseStatement()는 시작 시 첫 토큰을 식별
		토큰 식별 후 현재 명령문이 무엇인지 확인하여 구문 분석 루틴을 호출한다!
		
		단말 원소만 남을 때까지 재귀적으로  반복.... 단말 원소면 ... () 이것만 남을때까지 반복함.

	LL(0) 문법
		단순하고 우아하다!
		비단말에서 유도되는 규칙이 여러개인 경우, 항상 첫번째 토큰만 보고 결정 할 수 있다!
		이런 속성을 가진 문법을 LL(0) 라고 한대... 재귀적 하향 알고리즘을 이용하면 쉽고 깔끔하게 다룰 수 있지
		
		첫번째 토큰만으로 불가능함녀 그 다음 토큰을 살펴봄. 토큰 수가 많아질수록 문제가 복잡해진다.... 근데 잭은 LL(0)에 가까움
		! 다만, 표현식을 분석할 때 다음 토큰을 미리 살펴봐야 함

[명세]
	잭언어 문법 정의
2.1 잭 언어 문법
	'xxx' 혼따옴표 글자는 그대로 토큰행
	xxx : 일반 글꼴은 언어 구조 이름에 쓰임
	() : 언어 구조를 하나로 묶는데 사용
	x|y : x 또는 y가 나올 수 있음
	x? : x가 0번 or 1번 나타나는 경우
	x* : x가 0번 이상 나타나는 경우
	
2.2 잭 언어 구문 분석기
	현재 읽은 요소가 표현식인지, 명령문인지, 변수명인지
	
	심볼로 구분합시다!
	다만, 심볼이 두개 연속으로 등장하는 경우도 있음
2.3 구문 분석기 입력
	prompt> JackAnalyzer SOURCE
	source 는 디렉터리이거나 .jack 단일 파일을 받아 해당 디렉터리에 .xml 파일을 생성
	디렉터리면 파일들을 각각 컴파일하여 파일 생성
2.4 구문 분석기 출력
	단말 요소와 비단말 요소 를 인식해야 함
	
	단말 구문분석기 - xxx인 타임 단말요소를 만나면 다음과 같은 출력 생성
		<xxx> terminal </xxx>
		* xxx 는 토큰 타입 다섯개중 하나 : keyword, symbol, IntegerConstant, stringConstant, identifier
	
	비단말 구문 분석기 - xxx
		print <xxx>
		xxx 요소의 분문에 대한 재귀 코드
		print </xxx>
		* xxx는 비단말 요소들 중 하나, class, statements, express, term ... 책 참조
		
작성할 모듈
JackAnalyzer : 다른 모듈들을 설정하고 불러오는 최상단 모듈
	출력파일을 생성하고, 파일에 쓸 준비를함
	CompilationEngine을 이용해서 입력 JackTokenizer를 컴파일하고 출력파일에 저장한다!
JackTokenizer : 토큰화 모듈
	입력 스트림에서 주석과 공백을 모두 제거, 잭언어 토큰들로 분해할거임
	어우... 좀 길겠다
CompilationEngine : 재귀적 하향 구문 분석기
	실제 컴파일을 출력
	! xxx를 구문 분석한 결과를 출력, 다음에 처리할 구문 요소가 xxx 일때만 compilexxx() 를 호출 할 수 있다!
	
< : &lt
> : &gt
" : &quot
& : &amp
로 바꿔서 출력


나머지 컴파일 완성하는거는 다음장에 할것이고...